[package]
name = "esp-hal-i2c-slave-async-basic-test"
version = "0.1.0"
edition = "2021"

[dependencies]
esp-bootloader-esp-idf = { path = "../../../../../../../esp-bootloader-esp-idf" }
esp-hal = { path = "../../../../../../../esp-hal", features = ["unstable"] }
esp-rtos = { path = "../../../../../../../esp-rtos", features = ["embassy"] }
esp-backtrace = { version = "0.18.0", features = ["println", "panic-handler"] }
esp-println = { version = "0.16.0", default-features = false, features = [
    "uart",
] }
embassy-executor = { version = "0.9.0" }
embassy-time = "0.5.0"
static_cell = "2.1.0"

[features]
default = ["esp32c6"]

# ESP32 variants
esp32 = [
    "esp-hal/esp32",
    "esp-backtrace/esp32",
    "esp-println/esp32",
    "esp-bootloader-esp-idf/esp32",
    "esp-rtos/esp32",
]
esp32c2 = [
    "esp-hal/esp32c2",
    "esp-backtrace/esp32c2",
    "esp-println/esp32c2",
    "esp-bootloader-esp-idf/esp32c2",
    "esp-rtos/esp32c2",
]
esp32c3 = [
    "esp-hal/esp32c3",
    "esp-backtrace/esp32c3",
    "esp-println/esp32c3",
    "esp-bootloader-esp-idf/esp32c3",
    "esp-rtos/esp32c3",
]
esp32c6 = [
    "esp-hal/esp32c6",
    "esp-backtrace/esp32c6",
    "esp-println/esp32c6",
    "esp-bootloader-esp-idf/esp32c6",
    "esp-rtos/esp32c6",
]
esp32h2 = [
    "esp-hal/esp32h2",
    "esp-backtrace/esp32h2",
    "esp-println/esp32h2",
    "esp-bootloader-esp-idf/esp32h2",
    "esp-rtos/esp32h2",
]
esp32s2 = [
    "esp-hal/esp32s2",
    "esp-backtrace/esp32s2",
    "esp-println/esp32s2",
    "esp-bootloader-esp-idf/esp32s2",
    "esp-rtos/esp32s2",
]
esp32s3 = [
    "esp-hal/esp32s3",
    "esp-backtrace/esp32s3",
    "esp-println/esp32s3",
    "esp-bootloader-esp-idf/esp32s3",
    "esp-rtos/esp32s3",
]

[profile.dev]
# Rust debug is too slow.
# For debug builds always builds with some optimization
opt-level = "s"

[profile.release]
codegen-units = 1        # LLVM can perform better optimizations using a single thread
debug = 2
debug-assertions = false
incremental = false
lto = 'fat'
opt-level = 's'
overflow-checks = false
